<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
grav = 0.5;
hsp = 0;
vsp = 0;
jumpSpeed = 8;
moveSpeed = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision

//Horizontal Collision
if (place_meeting(x+hsp,y,obj_ground))
{
    while(!place_meeting(x+sign(hsp),y,obj_ground))
    {
        x += sign(hsp);
    }
    hsp = 0;
}
x += hsp;

//Verticle Collision
if (place_meeting(x,y+vsp,obj_ground))
{
    while(!place_meeting(x,y+sign(vsp),obj_ground))
    {
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Input
//Get the player's input
key_right = keyboard_check(ord('D'));
key_left  = -keyboard_check(ord('A'));
key_jump  = keyboard_check_pressed(vk_space);
key_up    = keyboard_check(ord('W'));

//React to inputs
move = key_left + key_right;
hsp = move * moveSpeed;

if (vsp &lt; 10) vsp += grav;

if (place_meeting(x,y+1,obj_ground))
{
    vsp = key_jump * -jumpSpeed;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation
image_speed = 0.15;
// Static
if (hsp == 0)
{
    sprite_index = spr_player;
}
// Left Animation
if (hsp &lt; 0)
{
    sprite_index = spr_playerLeft;
}
// Right Animation
if (hsp &gt; 0)
{
    sprite_index = spr_playerRight;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Background Scrolling
if (room == rm_temp)
{
    background_x[0] = -x - (background_width[0]);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Room Switching
//Main Room
if (room = rm_temp)
{
    //Go to far right building
    if (x &lt;= 907&amp;&amp; x &gt;= 872)
    {
        sprite_index = spr_playerBack;
        if (key_up &gt; 0)
        {
            room_goto(rm_company);
        }   
    }
    //Go to second to right building
    else if (x &lt;= 672 &amp;&amp; x &gt;= 632)
    {
        sprite_index = spr_playerBack;
        if (key_up &gt; 0)
        {
            room_goto(rm_mining);
        } 
    }
    //Go to second to left building
    else if (x &lt;= 427 &amp;&amp; x &gt;= 397)
    {
        sprite_index = spr_playerBack;
        if (key_up &gt; 0)
        {
            room_goto(rm_fishing);
        } 
    }
    //Go to far left building
    else if (x &lt;= 182 &amp;&amp; x &gt;= 152)
    {
        sprite_index = spr_playerBack;
        if (key_up &gt; 0)
        {
            room_goto(rm_bank);
        } 
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///When in room
if (room == rm_bank || room == rm_company || room == rm_mining || room == rm_fishing)
{
    sprite_index = spr_playerBack;
    self.x = 512;
    self.y = 690;
    moveSpeed = 0;
    jumpSpeed = 0;
    
    // Leave room
    if (keyboard_check(ord('S')) &gt; 0)
    {
        sprite_index = spr_player;
        room_goto(rm_temp);
    }
}
else
{
    moveSpeed = 5;
    jumpSpeed = 8;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
